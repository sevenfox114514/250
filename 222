104 王满瑞 18:29:41

          gpt_url=Ws_Param.create_url(),

104 王满瑞 18:30:04
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class ArithmeticGenerator {
    private static final String[] OPERATORS = {"+", "-", "*", "/"};

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = getNumberInput(scanner, "请输入题目数量：");
        int maxNum = getNumberInput(scanner, "请输入最大数：");
        boolean hasDecimal = getYesNoInput(scanner, "是否有小数（y/n）：");
        boolean hasBracket = getYesNoInput(scanner, "是否有括号（y/n）：");
        List<String> operators = getOperatorsInput(scanner);
        List<String> expressions = generateExpressions(num, maxNum, hasDecimal, hasBracket, operators);
        int outputMethod = getOutputMethodInput(scanner);
        if (outputMethod == 1) {
            String filePath = getStringInput(scanner, "请输入文件路径：");
            outputToFile(expressions, filePath);
        } else if (outputMethod == 2) {
            outputToConsole(expressions);
        } else {
            System.out.println("输入有误，请重新运行程序。");
        }
    }

104 王满瑞 18:30:29
 private static int getNumberInput(Scanner scanner, String prompt) {
        int num = 0;
        while (num <= 0) {
            System.out.print(prompt);
            try {
                num = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("输入有误，请重新输入。");
            }
        }
        return num;
    }

    private static boolean getYesNoInput(Scanner scanner, String prompt) {
        String input = "";
        while (!input.equalsIgnoreCase("y") && !input.equalsIgnoreCase("n")) {
            System.out.print(prompt);
            input = scanner.nextLine();
        }
        return input.equalsIgnoreCase("y");
    }

    private static List<String> getOperatorsInput(Scanner scanner) {
        List<String> operators = new ArrayList<>();
        if (getYesNoInput(scanner, "是否有加法（y/n）：")) {
            operators.add("+");
        }
        if (getYesNoInput(scanner, "是否有减法（y/n）：")) {
            operators.add("-");
        }
        if (getYesNoInput(scanner, "是否有乘法（y/n）：")) {
            operators.add("*");
        }
        if (getYesNoInput(scanner, "是否有除法（y/n）：")) {
            operators.add("/");
        }
        return operators;
    }

    private static int getOutputMethodInput(Scanner scanner) {
        int outputMethod = 0;
        while (outputMethod != 1 && outputMethod != 2) {
            System.out.println("请选择输出方式（1.输出到文件 2.打印到控制台）：");
            try {
                outputMethod = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("输入有误，请重新输入。");
            }
        }
        return outputMethod;
    }

    private static String getStringInput(Scanner scanner, String prompt) {
        System.out.print(prompt);
        return scanner.nextLine();
    }

    private static List<String> generateExpressions(int num, int maxNum, boolean hasDecimal, boolean hasBracket, List<String> operators) {
        List<String> expressions = new ArrayList<>();
        Random random = new Random();
        for (int i = 0; i < num; i++) {
            StringBuilder sb = new StringBuilder();
            if (hasBracket && random.nextInt(2) == 1) {
                int bracketPosition = random.nextInt(2) + 1;
                if (bracketPosition == 1) {
                    sb.append("(");
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(" ");
                    sb.append(operators.get(random.nextInt(operators.size())));
                    sb.append(" ");
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(")");
                    sb.append(" ");
                    sb.append(operators.get(random.nextInt(operators.size())));
                    sb.append(" ");
                    sb.append(generateNum(maxNum, hasDecimal));
                } else {
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(" ");
                    sb.append(operators.get(random.nextInt(operators.size())));
                    sb.append(" ");
                    sb.append("(");
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(" ");
                    sb.append(operators.get(random.nextInt(operators.size())));
                    sb.append(" ");
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(")");
                }
            } else {
                sb.append(generateNum(maxNum, hasDecimal));
                sb.append(" ");
                sb.append(operators.get(random.nextInt(operators.size())));
                sb.append(" ");
                sb.append(generateNum(maxNum, hasDecimal));
                sb.append(" ");
                sb.append(operators.get(random.nextInt(operators.size())));
                sb.append(" ");
                sb.append(generateNum(maxNum, hasDecimal));
            }
            expressions.add(sb.toString());
        }
        return expressions;
    }

104 王满瑞 18:30:43
    private static double generateNum(int maxNum, boolean hasDecimal) {
        Random random = new Random();
        if (hasDecimal) {
            return Math.round(random.nextDouble() * maxNum * 100) / 100.0;
        } else {
            return random.nextInt(maxNum + 1);
        }
    }

    private static void outputToFile(List<String> expressions, String filePath) {
        try {
            File file = new File(filePath);
            FileWriter writer = new FileWriter(file);
            for (int i = 0; i < expressions.size(); i++) {
                writer.write((i + 1) + ". " + expressions.get(i) + " =\n");
            }
            writer.close();
            System.out.println("已输出到文件：" + filePath);
        } catch (IOException e) {
            System.out.println("输出到文件失败：" + e.getMessage());
        }
    }

    private static void outputToConsole(List<String> expressions) {
        for (int i = 0; i < expressions.size(); i++) {
            System.out.println((i + 1) + ". " + expressions.get(i) + " =");
        }
    }
}
 private static int getNumberInput(Scanner scanner, String prompt) {
        int num = 0;
        while (num <= 0) {
            System.out.print(prompt);
            try {
                num = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("输入有误，请重新输入。");
            }
        }
        return num;
    }

    private static boolean getYesNoInput(Scanner scanner, String prompt) {
        String input = "";
        while (!input.equalsIgnoreCase("y") && !input.equalsIgnoreCase("n")) {
            System.out.print(prompt);
            input = scanner.nextLine();
        }
        return input.equalsIgnoreCase("y");
    }

    private static List<String> getOperatorsInput(Scanner scanner) {
        List<String> operators = new ArrayList<>();
        if (getYesNoInput(scanner, "是否有加法（y/n）：")) {
            operators.add("+");
        }
        if (getYesNoInput(scanner, "是否有减法（y/n）：")) {
            operators.add("-");
        }
        if (getYesNoInput(scanner, "是否有乘法（y/n）：")) {
            operators.add("*");
        }
        if (getYesNoInput(scanner, "是否有除法（y/n）：")) {
            operators.add("/");
        }
        return operators;
    }

    private static int getOutputMethodInput(Scanner scanner) {
        int outputMethod = 0;
        while (outputMethod != 1 && outputMethod != 2) {
            System.out.println("请选择输出方式（1.输出到文件 2.打印到控制台）：");
            try {
                outputMethod = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("输入有误，请重新输入。");
            }
        }
        return outputMethod;
    }

    private static String getStringInput(Scanner scanner, String prompt) {
        System.out.print(prompt);
        return scanner.nextLine();
    }

104 王满瑞 18:30:44
   private static List<String> generateExpressions(int num, int maxNum, boolean hasDecimal, boolean hasBracket, List<String> operators) {
        List<String> expressions = new ArrayList<>();
        Random random = new Random();
        for (int i = 0; i < num; i++) {
            StringBuilder sb = new StringBuilder();
            if (hasBracket && random.nextInt(2) == 1) {
                int bracketPosition = random.nextInt(2) + 1;
                if (bracketPosition == 1) {
                    sb.append("(");
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(" ");
                    sb.append(operators.get(random.nextInt(operators.size())));
                    sb.append(" ");
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(")");
                    sb.append(" ");
                    sb.append(operators.get(random.nextInt(operators.size())));
                    sb.append(" ");
                    sb.append(generateNum(maxNum, hasDecimal));
                } else {
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(" ");
                    sb.append(operators.get(random.nextInt(operators.size())));
                    sb.append(" ");
                    sb.append("(");
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(" ");
                    sb.append(operators.get(random.nextInt(operators.size())));
                    sb.append(" ");
                    sb.append(generateNum(maxNum, hasDecimal));
                    sb.append(")");
                }
            } else {
                sb.append(generateNum(maxNum, hasDecimal));
                sb.append(" ");
                sb.append(operators.get(random.nextInt(operators.size())));
                sb.append(" ");
                sb.append(generateNum(maxNum, hasDecimal));
                sb.append(" ");
                sb.append(operators.get(random.nextInt(operators.size())));
                sb.append(" ");
                sb.append(generateNum(maxNum, hasDecimal));
            }
            expressions.add(sb.toString());
        }
        return expressions;
    }

    private static double generateNum(int maxNum, boolean hasDecimal) {
        Random random = new Random();
        if (hasDecimal) {
            return Math.round(random.nextDouble() * maxNum * 100) / 100.0;
        } else {
            return random.nextInt(maxNum + 1);
        }
    }

    private static void outputToFile(List<String> expressions, String filePath) {
        try {
            File file = new File(filePath);
            FileWriter writer = new FileWriter(file);
            for (int i = 0; i < expressions.size(); i++) {
                writer.write((i + 1) + ". " + expressions.get(i) + " =\n");
            }
            writer.close();
            System.out.println("已输出到文件：" + filePath);
        } catch (IOException e) {
            System.out.println("输出到文件失败：" + e.getMessage());
        }
    }

    private static void outputToConsole(List<String> expressions) {
        for (int i = 0; i < expressions.size(); i++) {
            System.out.println((i + 1) + ". " + expressions.get(i) + " =");
        }
    }
}


